version: '3.8'

networks:
  ecommerce-network:
    driver: bridge

services:
  # API Gateway
  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    container_name: ecommerce-apigateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "5000:80"
    networks:
      - ecommerce-network
    depends_on:
      - productservice
      - orderservice
      - customerservice
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Product Service
  productservice:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    container_name: ecommerce-productservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "5001:80"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Order Service
  orderservice:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    container_name: ecommerce-orderservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Services__ProductService=http://productservice/
    ports:
      - "5002:80"
    networks:
      - ecommerce-network
    depends_on:
      - productservice
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Customer Service
  customerservice:
    build:
      context: .
      dockerfile: CustomerService/Dockerfile
    container_name: ecommerce-customerservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "5003:80"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce-network
    depends_on:
      - apigateway
      - productservice
      - orderservice
      - customerservice

  # Optional: Add Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network
    depends_on:
      - prometheus