using System.Text.Json.Serialization;

namespace DebuggingDemo.Models;

/// <summary>
/// Standard error response following RFC 7807 Problem Details
/// </summary>
public class ErrorResponse
{
    /// <summary>
    /// A URI reference that identifies the problem type
    /// </summary>
    public string Type { get; set; } = string.Empty;

    /// <summary>
    /// A short, human-readable summary of the problem type
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// The HTTP status code generated by the origin server
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem
    /// </summary>
    public string Detail { get; set; } = string.Empty;

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem
    /// </summary>
    public string Instance { get; set; } = string.Empty;

    /// <summary>
    /// Unique identifier for this request
    /// </summary>
    public string RequestId { get; set; } = string.Empty;

    /// <summary>
    /// Timestamp when the error occurred
    /// </summary>
    public DateTime Timestamp { get; set; }

    /// <summary>
    /// Additional debugging information (only in development)
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public object? DebugInfo { get; set; }
}

/// <summary>
/// Represents a validation error with field-specific details
/// </summary>
public class ValidationErrorResponse : ErrorResponse
{
    /// <summary>
    /// Dictionary of field names and their validation errors
    /// </summary>
    public Dictionary<string, string[]> Errors { get; set; } = new();
}
